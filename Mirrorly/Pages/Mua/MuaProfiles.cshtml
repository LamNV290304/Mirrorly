@page
@model Mirrorly.Pages.Mua.MuaProfilesModel
@using Mirrorly.Models;

<p>
    Khám phá các Thợ Trang Điểm tài năng của chúng tôi và danh mục đầu tư ấn tượng của họ.
    Sử dụng tính năng tìm kiếm và bộ lọc để tìm ra sự kết hợp hoàn hảo.
</p>

<body>
    <!-- ====== THANH LỌC ====== -->
    <div class="filter-bar">
        <input type="text" id="searchInput" placeholder="Tìm kiếm theo tên hoặc bio..."
               onkeyup="filterMua(); showSearchSuggestions()" autocomplete="off" />
        <div id="searchSuggestions" class="suggestions-box"></div>

        <select id="areaFilter" onchange="filterMua()">
            <option value="">All Areas</option>
            @foreach (var area in Model.MuaProfiles.Select(m => m.AddressLine).Distinct())
            {
                <option value="@area">@area</option>
            }
        </select>

        <select id="priceFilter" onchange="filterMua()">
            <option value="">All Prices</option>
            <option value="low">Under $50</option>
            <option value="mid">$50 - $100</option>
            <option value="high">Over $100</option>
        </select>

        <select id="ratingFilter" onchange="filterMua()">
            <option value="">All Ratings</option>
            <option value="5">5 Stars</option>
            <option value="4">4+ Stars</option>
            <option value="3">3+ Stars</option>
        </select>

        <select id="experienceFilter" onchange="filterMua()">
            <option value="">All Experience</option>
            <option value="1">1+ years</option>
            <option value="3">3+ years</option>
            <option value="5">5+ years</option>
            <option value="10">10+ years</option>
        </select>
    </div>

    <!-- ====== DANH SÁCH MUA ====== -->
    <div class="row mua-grid" id="muaContainer">
        @foreach (var mua in Model.MuaProfiles)
        {
            var avgPrice = (mua.Services != null && mua.Services.Any()) ? mua.Services.Average(s => s.BasePrice) : 0;
            var avgRating = (mua.Reviews != null && mua.Reviews.Any()) ? mua.Reviews.Average(r => r.Rating) : 0;
            var imgUrl = (mua.PortfolioItems != null && mua.PortfolioItems.Any())
            ? mua.PortfolioItems.First().MediaUrl
            : "/uploads/default-avatar.jpg";

            <div class="mua-card"
                 data-area="@mua.AddressLine"
                 data-name="@mua.DisplayName"
                 data-bio="@mua.Bio"
                 data-price="@avgPrice"
                 data-rating="@avgRating"
                 data-experience="@mua.ExperienceYears"
                 data-muaid="@mua.Muaid"
                 onclick="window.location.href='/Mua/Details/@mua.Muaid'">

                <div class="mua-image-container">
                    <img src="@imgUrl" alt="@mua.DisplayName" class="mua-image" />
                    <div class="mua-overlay">
                        <span class="view-btn">Xem chi tiết</span>
                    </div>
                </div>

                <div class="mua-info">
                    <h3 class="mua-name">@mua.DisplayName</h3>
                    <p class="mua-bio">@((mua.Bio?.Length > 70) ? mua.Bio.Substring(0, 70) + "..." : mua.Bio)</p>
                    <div class="mua-meta">
                        <span><i class="fa fa-map-marker-alt"></i> @mua.AddressLine</span>
                        <span><i class="fa fa-briefcase"></i> @mua.ExperienceYears năm</span>
                    </div>
                    <div class="mua-stats">
                        <span class="price">💰 @(avgPrice > 0 ? "$" + avgPrice.ToString("0.0") : "N/A")</span>
                        <span class="rating">⭐ @(avgRating > 0 ? avgRating.ToString("0.0") : "N/A")</span>
                    </div>
                </div>
            </div>
        }
    </div>

</body>

<!-- ====== CSS ====== -->
<style>
    body {
        background: #fff0f6;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #6d214f;
        margin: 0;
        padding: 20px;
    }

    p {
        font-size: 16px;
        margin-bottom: 20px;
        color: #880e4f;
        text-align: center;
    }

    /* ====== FILTER BAR ====== */
    .filter-bar {
        margin-bottom: 20px;
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        justify-content: center;
    }

        .filter-bar input,
        .filter-bar select {
            padding: 10px 14px;
            border: 1px solid #f8bbd0;
            border-radius: 25px;
            font-size: 14px;
            outline: none;
            transition: 0.25s;
        }

        .filter-bar input {
            width: 200px;
        }

            .filter-bar input:focus,
            .filter-bar select:focus {
                border-color: #f48fb1;
                box-shadow: 0 0 8px rgba(248, 187, 208, 0.4);
            }

    /* ====== GRID ====== */
    .row {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        justify-content: center;
    }

    /* ====== CARD ====== */
    .mua-card {
        background: #ffffff;
        border: 2px solid #f8c8dc;
        border-radius: 20px;
        box-shadow: 0 4px 12px rgba(248, 187, 208, 0.25);
        width: 300px;
        overflow: hidden;
        transition: transform 0.25s, box-shadow 0.25s;
        cursor: pointer;
    }

        .mua-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(248, 187, 208, 0.4);
        }

    /* ====== ẢNH ====== */
    .mua-image-container {
        width: 100%;
        height: 220px;
        overflow: hidden;
        background: #ffeef5;
    }

    .mua-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.4s ease;
    }

    .mua-card:hover .mua-image {
        transform: scale(1.05);
    }

    /* ====== THÔNG TIN ====== */
    .mua-info {
        padding: 16px;
        text-align: left;
    }

        .mua-info h3 {
            color: #e91e63;
            font-size: 1.2rem;
            margin-bottom: 8px;
            text-align: center;
            text-decoration: underline;
        }

    .bio {
        font-size: 0.9rem;
        color: #6d214f;
        margin-bottom: 12px;
        text-align: center;
    }

        .bio .see-more {
            color: #ad1457;
            font-weight: 600;
            cursor: pointer;
        }

    .mua-info ul {
        list-style: none;
        padding: 0;
        margin: 0;
        font-size: 0.9rem;
    }

    .mua-info li {
        padding: 5px 0;
        border-bottom: 1px solid #f8bbd0;
    }

        .mua-info li:last-child {
            border-bottom: none;
        }

    /* ====== GỢI Ý TÌM KIẾM ====== */
    .suggestions-box {
        position: absolute;
        background: #fff;
        border: 1px solid #f8bbd0;
        border-radius: 10px;
        width: 200px;
        display: none;
        z-index: 10;
        color: #6d214f;
    }

        .suggestions-box div {
            padding: 8px 12px;
            cursor: pointer;
            transition: background 0.2s;
        }

            .suggestions-box div:hover {
                background: #fde4ec;
            }


    /* Vùng tổng thể */
    .mua-profiles-section {
        background-color: #fff5f9;
        padding: 50px 20px;
        min-height: 100vh;
    }

    /* Tiêu đề */
    .section-title {
        font-size: 2rem;
        font-weight: 700;
        color: #d63384;
        margin-bottom: 8px;
    }

    .section-subtitle {
        color: #666;
        font-size: 1rem;
        margin-bottom: 30px;
    }

    /* Lưới card */
    .mua-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 28px;
        justify-content: center;
    }

    /* Card từng thợ */
    .mua-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.08);
        transition: all 0.25s ease;
        cursor: pointer;
        position: relative;
    }

        .mua-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 8px 20px rgba(255, 105, 180, 0.25);
        }

    /* Ảnh đại diện */
    .mua-image {
        height: 240px;
        background-size: cover;
        background-position: center;
        position: relative;
    }

    .mua-hover {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 192, 203, 0.4);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .mua-card:hover .mua-hover {
        opacity: 1;
    }

    /* Nút xem chi tiết */
    .view-btn {
        background-color: #ff69b4;
        color: white;
        padding: 10px 18px;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: background-color 0.25s;
    }

        .view-btn:hover {
            background-color: #d63384;
        }

    /* Thông tin */
    .mua-info {
        padding: 18px 16px;
    }

    .mua-name {
        color: #d63384;
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 6px;
    }

    .mua-bio {
        color: #555;
        font-size: 0.9rem;
        margin-bottom: 10px;
        line-height: 1.4;
        height: 45px;
        overflow: hidden;
    }

    .mua-details span {
        display: block;
        color: #666;
        font-size: 0.85rem;
        margin-bottom: 3px;
    }

    .mua-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 24px;
        padding: 20px;
    }

    .mua-card {
        background: #fff;
        border-radius: 18px;
        overflow: hidden;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.08);
        transition: all 0.25s ease;
        cursor: pointer;
        position: relative;
    }

        .mua-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 8px 22px rgba(255, 105, 180, 0.25);
        }

    /* Ảnh */
    .mua-image-container {
        position: relative;
        width: 100%;
        height: 230px;
        overflow: hidden;
    }

    .mua-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .mua-card:hover .mua-image {
        transform: scale(1.05);
    }

    /* Overlay hover */
    .mua-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 182, 193, 0.45);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .mua-card:hover .mua-overlay {
        opacity: 1;
    }

    .view-btn {
        background-color: #ff69b4;
        color: #fff;
        padding: 8px 14px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.95rem;
        transition: background-color 0.2s ease;
    }

        .view-btn:hover {
            background-color: #d63384;
        }

    /* Thông tin */
    .mua-info {
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .mua-name {
        font-size: 1.2rem;
        color: #d63384;
        font-weight: 700;
        margin-bottom: 2px;
    }

    .mua-bio {
        color: #555;
        font-size: 0.9rem;
        line-height: 1.4;
        height: 42px;
        overflow: hidden;
    }

    .mua-meta, .mua-stats {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #666;
    }

    .mua-stats {
        margin-top: 4px;
        font-weight: 600;
    }

</style>

<!-- ====== SCRIPT ====== -->
<script>
    // RÚT GỌN MÔ TẢ
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".mua-card .bio").forEach(bioEl => {
            const fullText = bioEl.textContent.trim();
            const words = fullText.split(/\s+/);
            const limit = 40;

            if (words.length > limit) {
                const shortText = words.slice(0, limit).join(" ") + "... ";
                const seeMore = document.createElement("span");
                seeMore.textContent = "Xem thêm";
                seeMore.classList.add("see-more");

                bioEl.textContent = shortText;
                bioEl.appendChild(seeMore);

                seeMore.addEventListener("click", (e) => {
                    e.stopPropagation();
                    if (seeMore.textContent === "Xem thêm") {
                        bioEl.textContent = fullText + " ";
                        seeMore.textContent = "Thu gọn";
                        bioEl.appendChild(seeMore);
                    } else {
                        bioEl.textContent = shortText;
                        seeMore.textContent = "Xem thêm";
                        bioEl.appendChild(seeMore);
                    }
                });
            }
        });
    });

    // GỢI Ý TÌM KIẾM
    function showSearchSuggestions() {
        const input = document.getElementById("searchInput");
        const suggestionsBox = document.getElementById("searchSuggestions");
        const term = input.value.toLowerCase();

        let history = JSON.parse(localStorage.getItem("muaSearchHistory") || "[]");
        let uniqueTerms = [...new Set(history.map(h => h.term))];

        let filtered = uniqueTerms.filter(t => t.toLowerCase().includes(term)).slice(-5).reverse();

        if (filtered.length === 0) {
            suggestionsBox.style.display = "none";
            return;
        }

        suggestionsBox.innerHTML = "";
        filtered.forEach(t => {
            const div = document.createElement("div");
            div.textContent = t;
            div.onclick = () => {
                input.value = t;
                suggestionsBox.style.display = "none";
                filterMua();
            };
            suggestionsBox.appendChild(div);
        });

        suggestionsBox.style.display = "block";
        suggestionsBox.style.left = input.offsetLeft + "px";
        suggestionsBox.style.top = (input.offsetTop + input.offsetHeight) + "px";
    }

    document.addEventListener("click", function (e) {
        if (!document.getElementById("searchInput").contains(e.target) &&
            !document.getElementById("searchSuggestions").contains(e.target)) {
            document.getElementById("searchSuggestions").style.display = "none";
        }
    });

    // BỘ LỌC
    function filterMua() {
        const input = document.getElementById("searchInput").value.toLowerCase();
        const selectedArea = document.getElementById("areaFilter").value.toLowerCase();
        const selectedPrice = document.getElementById("priceFilter").value;
        const selectedRating = document.getElementById("ratingFilter").value;
        const selectedExperience = document.getElementById("experienceFilter").value;
        const cards = document.querySelectorAll(".mua-card");

        cards.forEach(card => {
            const name = card.getAttribute("data-name")?.toLowerCase() || "";
            const bio = card.getAttribute("data-bio")?.toLowerCase() || "";
            const area = card.getAttribute("data-area")?.toLowerCase() || "";
            const price = parseFloat(card.getAttribute("data-price")) || 0;
            const rating = parseFloat(card.getAttribute("data-rating")) || 0;
            const experience = parseInt(card.getAttribute("data-experience")) || 0;

            const matchSearch = !input || name.includes(input) || bio.includes(input);
            const matchArea = !selectedArea || area === selectedArea;
            let matchPrice = true;
            if (selectedPrice === "low") matchPrice = price < 50;
            else if (selectedPrice === "mid") matchPrice = price >= 50 && price <= 100;
            else if (selectedPrice === "high") matchPrice = price > 100;

            let matchRating = !selectedRating || rating >= parseInt(selectedRating);
            let matchExperience = !selectedExperience || experience >= parseInt(selectedExperience);

            card.style.display = (matchSearch && matchArea && matchPrice && matchRating && matchExperience) ? "block" : "none";
        });

        if (input) saveSearchHistory(input);
    }

    function saveSearchHistory(term) {
        let history = JSON.parse(localStorage.getItem("muaSearchHistory") || "[]");
        history.push({ term: term, date: new Date().toISOString() });
        if (history.length > 50) history = history.slice(-50);
        localStorage.setItem("muaSearchHistory", JSON.stringify(history));
    }
</script>
