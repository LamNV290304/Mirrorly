@page "/Admin/Users/Details/{id:int}"
@model Mirrorly.Pages.Admin.Users.DetailsModel
@{
    ViewData["Title"] = "Chi tiết User - " + Model.User.FullName;
    Layout = "~/Pages/Admin/_AdminLayout.cshtml";
}

<style>
    .user-details-container {
        display: grid;
        grid-template-columns: 350px 1fr;
        gap: 30px;
    }

    .user-profile-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 16px;
        text-align: center;
        height: fit-content;
    }

    .profile-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: rgba(255,255,255,0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        font-weight: 700;
        margin: 0 auto 20px;
    }

    .profile-name {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 8px;
    }

    .profile-email {
        opacity: 0.9;
        margin-bottom: 20px;
    }

    .profile-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin: 20px 0;
    }

    .profile-stat {
        text-align: center;
    }

    .stat-number {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 12px;
        opacity: 0.8;
        text-transform: uppercase;
    }

    .info-tabs {
        background: white;
        border-radius: 12px;
        overflow: hidden;
    }

    .tab-nav {
        display: flex;
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
    }

    .tab-button {
        flex: 1;
        padding: 15px;
        background: none;
        border: none;
        cursor: pointer;
        font-weight: 600;
        color: #64748b;
        transition: all 0.2s;
    }

        .tab-button.active {
            color: #3b82f6;
            background: white;
            border-bottom: 2px solid #3b82f6;
        }

    .tab-content {
        padding: 30px;
    }

    .tab-pane {
        display: none;
    }

        .tab-pane.active {
            display: block;
        }

    .info-grid {
        display: grid;
        grid-template-columns: 200px 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .info-label {
        font-weight: 600;
        color: #374151;
    }

    .info-value {
        color: #6b7280;
    }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px;
        background: #f8fafc;
        border-radius: 8px;
    }

    .activity-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
    }

        .activity-icon.login {
            background: #dbeafe;
            color: #1d4ed8;
        }

        .activity-icon.booking {
            background: #dcfce7;
            color: #166534;
        }

        .activity-icon.review {
            background: #fef3c7;
            color: #92400e;
        }

    .activity-details {
        flex: 1;
    }

    .activity-title {
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 4px;
    }

    .activity-desc {
        font-size: 14px;
        color: #6b7280;
    }

    .activity-time {
        font-size: 12px;
        color: #9ca3af;
    }
</style>

<div style="margin-bottom: 20px;">
    <a href="/Admin/Users" style="color: #3b82f6; text-decoration: none;">← Quay lại danh sách users</a>
</div>

<div class="user-details-container">
    <!-- User Profile Card -->
    <div class="user-profile-card">
        <div class="profile-avatar">
            @Model.User.Username.Substring(0, 1).ToUpper()
        </div>
        <div class="profile-name">@Model.User.FullName</div>
        <div class="profile-email">@Model.User.Email</div>

        <div style="margin: 20px 0;">
            <span class="status-badge @(Model.User.IsActive ? "status-active" : "status-inactive")"
                  style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">
                @(Model.User.IsActive ? "🟢 Active" : "🔴 Inactive")
            </span>
        </div>

        <div class="profile-stats">
            <div class="profile-stat">
                <div class="stat-number">@Model.TotalBookings</div>
                <div class="stat-label">Bookings</div>
            </div>
            <div class="profile-stat">
                <div class="stat-number">@Model.TotalReviews</div>
                <div class="stat-label">Reviews</div>
            </div>
        </div>

        <div style="margin-top: 30px; display: flex; flex-direction: column; gap: 10px;">
            @if (Model.User.IsActive)
            {
                <button onclick="toggleUserStatus(@Model.User.UserId, false)" class="btn btn-danger" style="width: 100%;">
                    🚫 Block User
                </button>
            }
            else
            {
                <button onclick="toggleUserStatus(@Model.User.UserId, true)" class="btn btn-success" style="width: 100%;">
                    ✅ Unblock User
                </button>
            }
            <a href="/Admin/Users/Edit/@Model.User.UserId" class="btn btn-warning" style="width: 100%;">
                ✏️ Chỉnh sửa
            </a>
            <button onclick="resetPassword(@Model.User.UserId)" class="btn btn-primary" style="width: 100%;">
                🔑 Reset Password
            </button>
        </div>
    </div>

    <!-- Info Tabs -->
    <div class="info-tabs">
        <div class="tab-nav">
            <button class="tab-button active" onclick="showTab('basic')">📋 Thông tin cơ bản</button>
            <button class="tab-button" onclick="showTab('activity')">📈 Hoạt động</button>
            @if (Model.User.RoleId == 2)
            {
                <button class="tab-button" onclick="showTab('mua')">💄 Hồ sơ Artist</button>
            }
            <button class="tab-button" onclick="showTab('security')">🔒 Bảo mật</button>
        </div>

        <div class="tab-content">
            <!-- Basic Info Tab -->
            <div id="basic-tab" class="tab-pane active">
                <h3 style="color: #1e293b; margin-bottom: 20px;">Thông tin cơ bản</h3>
                <div class="info-grid">
                    <div class="info-label">User ID:</div>
                    <div class="info-value">#@Model.User.UserId</div>

                    <div class="info-label">Username:</div>
                    <div class="info-value">@Model.User.Username</div>

                    <div class="info-label">Email:</div>
                    <div class="info-value">@Model.User.Email</div>

                    <div class="info-label">Họ tên:</div>
                    <div class="info-value">@Model.User.FullName</div>

                    <div class="info-label">Số điện thoại:</div>
                    <div class="info-value">@(Model.User.PhoneNumber ?? "Chưa cập nhật")</div>

                    <div class="info-label">Role:</div>
                    <div class="info-value">
                        <span class="status-badge @(Model.User.RoleId == 2 ? "status-verified" : Model.User.RoleId == 3 ? "status-pending" : "")">
                            @(Model.User.RoleId == 1 ? "Customer" : Model.User.RoleId == 2 ? "MUA" : "Admin")
                        </span>
                    </div>

                    <div class="info-label">Trạng thái email:</div>
                    <div class="info-value">
                        <span class="status-badge @(Model.User.IsEmailVerified ? "status-verified" : "status-pending")">
                            @(Model.User.IsEmailVerified ? "✅ Đã xác minh" : "⏳ Chưa xác minh")
                        </span>
                    </div>

                    <div class="info-label">Ngày tạo:</div>
                    <div class="info-value">@DateTime.Now.AddDays(-new Random().Next(1, 365)).ToString("dd/MM/yyyy HH:mm")</div>

                    <div class="info-label">Lần cuối online:</div>
                    <div class="info-value">@DateTime.Now.AddMinutes(-new Random().Next(1, 10080)).ToString("dd/MM/yyyy HH:mm")</div>
                </div>
            </div>

            <!-- Activity Tab -->
            <div id="activity-tab" class="tab-pane">
                <h3 style="color: #1e293b; margin-bottom: 20px;">Hoạt động gần đây</h3>
                <div class="activity-list">
                    @for (int i = 0; i < 8; i++)
                    {
                        var activities = new[] { "login", "booking", "review" };
                        var activity = activities[i % 3];
                        var time = DateTime.Now.AddHours(-new Random().Next(1, 168));

                        <div class="activity-item">
                            <div class="activity-icon @activity">
                                @(activity == "login" ? "🔑" : activity == "booking" ? "📅" : "⭐")
                            </div>
                            <div class="activity-details">
                                <div class="activity-title">
                                    @(activity == "login" ? "Đăng nhập hệ thống" :
                                                                    activity == "booking" ? "Tạo booking mới" : "Để lại đánh giá")
                                                                                                                              </div>
                                                                                                                              <div class="activity-desc">
                                    @(activity == "login" ? "Đăng nhập từ Chrome trên Windows" :
                                                                    activity == "booking" ? "Booking makeup dự tiệc với Bella MUA" : "Đánh giá 5 sao cho dịch vụ makeup cô dâu")
                            </div>
                        </div>
                        <div class="activity-time">@time.ToString("dd/MM HH:mm")</div>
                    </div>
                                        }
                </div>
            </div>

            @if (Model.User.RoleId == 2)
            {
                <!-- MUA Profile Tab -->
                <div id="mua-tab" class="tab-pane">
                    <h3 style="color: #1e293b; margin-bottom: 20px;">Hồ sơ Artist</h3>
                    @if (Model.MuaProfile != null)
                    {
                        <div class="info-grid">
                            <div class="info-label">Tên hiển thị:</div>
                            <div class="info-value">@Model.MuaProfile.DisplayName</div>

                            <div class="info-label">Kinh nghiệm:</div>
                            <div class="info-value">@(Model.MuaProfile.ExperienceYears?.ToString() ?? "Chưa cập nhật") năm</div>

                            <div class="info-label">Địa chỉ:</div>
                            <div class="info-value">@(Model.MuaProfile.AddressLine ?? "Chưa cập nhật")</div>

                            <div class="info-label">Hồ sơ công khai:</div>
                            <div class="info-value">
                                <span class="status-badge @(Model.MuaProfile.ProfilePublic ? "status-active" : "status-inactive")">
                                    @(Model.MuaProfile.ProfilePublic ? "✅ Công khai" : "🔒 Riêng tư")
                                </span>
                            </div>

                            <div class="info-label">Số dịch vụ:</div>
                            <div class="info-value">@Model.TotalServices dịch vụ</div>

                            <div class="info-label">Portfolio:</div>
                            <div class="info-value">@Model.TotalPortfolioItems hình ảnh</div>

                            <div class="info-label">Trạng thái xác minh:</div>
                            <div class="info-value">
                                <span class="status-badge @(Model.IsVerified ? "status-verified" : "status-pending")">
                                    @(Model.IsVerified ? "✅ Đã xác minh" : "⏳ Chưa xác minh")
                                </span>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.MuaProfile.Bio))
                        {
                            <div style="margin-top: 20px;">
                                <div class="info-label">Giới thiệu:</div>
                                <div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin-top: 8px; color: #374151;">
                                    @Model.MuaProfile.Bio
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div style="text-align: center; padding: 40px; color: #9ca3af;">
                            <p>User chưa tạo hồ sơ Artist</p>
                        </div>
                    }
                </div>
            }

            <!-- Security Tab -->
            <div id="security-tab" class="tab-pane">
                <h3 style="color: #1e293b; margin-bottom: 20px;">Bảo mật & Quyền hạn</h3>
                <div class="info-grid">
                    <div class="info-label">Trạng thái tài khoản:</div>
                    <div class="info-value">
                        <span class="status-badge @(Model.User.IsActive ? "status-active" : "status-inactive")">
                            @(Model.User.IsActive ? "🟢 Hoạt động" : "🔴 Bị khóa")
                        </span>
                    </div>

                    <div class="info-label">Email verified:</div>
                    <div class="info-value">
                        <span class="status-badge @(Model.User.IsEmailVerified ? "status-verified" : "status-pending")">
                            @(Model.User.IsEmailVerified ? "✅ Đã xác minh" : "⏳ Chưa xác minh")
                        </span>
                    </div>

                    <div class="info-label">2FA:</div>
                    <div class="info-value">
                        <span class="status-badge status-inactive">❌ Chưa kích hoạt</span>
                    </div>

                    <div class="info-label">Lần đổi mật khẩu:</div>
                    <div class="info-value">@DateTime.Now.AddDays(-new Random().Next(30, 180)).ToString("dd/MM/yyyy")</div>

                    <div class="info-label">IP đăng nhập cuối:</div>
                    <div class="info-value">192.168.1.@(new Random().Next(1, 255))</div>
                </div>

                <div style="margin-top: 30px;">
                    <h4 style="color: #1e293b; margin-bottom: 15px;">Hành động bảo mật</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px;">
                        <button onclick="resetPassword(@Model.User.UserId)" class="btn btn-primary">
                            🔑 Reset mật khẩu
                        </button>
                        <button onclick="forceLogout(@Model.User.UserId)" class="btn btn-warning">
                            🚪 Force logout tất cả device
                        </button>
                        @if (!Model.User.IsEmailVerified)
                        {
                            <button onclick="resendVerification(@Model.User.UserId)" class="btn btn-success">
                                📧 Gửi lại email xác minh
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function showTab(tabName) {
        // Hide all tab panes
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });

        // Remove active class from all buttons
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });

        // Show selected tab and activate button
        document.getElementById(tabName + '-tab').classList.add('active');
        event.target.classList.add('active');
    }

    async function toggleUserStatus(userId, isActive) {
        const action = isActive ? 'kích hoạt' : 'khóa';
        if (confirm(`Bạn có chắc muốn ${action} user này?`)) {
            try {
                const response = await fetch(`/Admin/Users/ToggleStatus`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userId, isActive })
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Có lỗi xảy ra khi cập nhật trạng thái');
                }
            } catch (error) {
                alert('Có lỗi xảy ra: ' + error.message);
            }
        }
    }

    async function resetPassword(userId) {
        if (confirm('Bạn có chắc muốn reset mật khẩu cho user này? Mật khẩu mới sẽ được gửi qua email.')) {
            try {
                const response = await fetch(`/Admin/Users/ResetPassword`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userId })
                });

                if (response.ok) {
                    alert('Mật khẩu đã được reset và gửi qua email cho user');
                } else {
                    alert('Có lỗi xảy ra khi reset mật khẩu');
                }
            } catch (error) {
                alert('Có lỗi xảy ra: ' + error.message);
            }
        }
    }

    async function forceLogout(userId) {
        if (confirm('Bạn có chắc muốn đăng xuất user này khỏi tất cả thiết bị?')) {
            try {
                const response = await fetch(`/Admin/Users/ForceLogout`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userId })
                });

                if (response.ok) {
                    alert('User đã được đăng xuất khỏi tất cả thiết bị');
                } else {
                    alert('Có lỗi xảy ra');
                }
            } catch (error) {
                alert('Có lỗi xảy ra: ' + error.message);
            }
        }
    }

    async function resendVerification(userId) {
        try {
            const response = await fetch(`/Admin/Users/ResendVerification`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId })
            });

            if (response.ok) {
                alert('Email xác minh đã được gửi lại');
            } else {
                alert('Có lỗi xảy ra khi gửi email');
            }
        } catch (error) {
            alert('Có lỗi xảy ra: ' + error.message);
        }
    }
</script>