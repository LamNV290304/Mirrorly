// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mirrorly.Models;

#nullable disable

namespace Mirrorly.Migrations
{
    [DbContext(typeof(ProjectExeContext))]
    partial class ProjectExeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mirrorly.Models.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookingId"));

                    b.Property<string>("AddressLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MuaId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SlotHaveBookId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TimeM")
                        .HasColumnType("time");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MuaId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Mirrorly.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ_Categories_CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Mirrorly.Models.CustomerProfile", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("Mirrorly.Models.IdentityVerification", b =>
                {
                    b.Property<long>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VerificationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackIdImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontIdImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedByAdminId")
                        .HasColumnType("int");

                    b.Property<string>("SelfieImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("VerificationId");

                    b.HasIndex("ProcessedByAdminId");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityVerifications");
                });

            modelBuilder.Entity("Mirrorly.Models.Muaprofile", b =>
                {
                    b.Property<int>("Muaid")
                        .HasColumnType("int")
                        .HasColumnName("MUAId");

                    b.Property<string>("AddressLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<bool>("ProfilePublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Muaid");

                    b.ToTable("MUAProfiles", (string)null);
                });

            modelBuilder.Entity("Mirrorly.Models.PortfolioItem", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Muaid")
                        .HasColumnType("int")
                        .HasColumnName("MUAId");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ItemId");

                    b.HasIndex("Muaid");

                    b.ToTable("PortfolioItems");
                });

            modelBuilder.Entity("Mirrorly.Models.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReviewId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MuaId")
                        .HasColumnType("int");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("ReviewId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Reviews_CustomerId");

                    b.HasIndex(new[] { "MuaId" }, "IX_Reviews_MuaId");

                    b.HasIndex(new[] { "BookingId", "CustomerId" }, "UQ_Review_Booking_Customer")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Mirrorly.Models.Role", b =>
                {
                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "RoleName" }, "UQ_Roles_RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Mirrorly.Models.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("VND")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMin")
                        .HasColumnType("int");

                    b.Property<int>("MuaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MuaId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Mirrorly.Models.TimeOff", b =>
                {
                    b.Property<long>("TimeOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TimeOffId"));

                    b.Property<DateTime>("EndUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("MuaId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("TimeOffId");

                    b.HasIndex("MuaId");

                    b.ToTable("TimeOffs");
                });

            modelBuilder.Entity("Mirrorly.Models.Token", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("Token")
                        .IsFixedLength();

                    b.HasKey("Email");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Mirrorly.Models.TwoFactorAuth", b =>
                {
                    b.Property<int>("TwoFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TwoFactorId"));

                    b.Property<string>("BackupCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnabledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TwoFactorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TwoFactorAuths");
                });

            modelBuilder.Entity("Mirrorly.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ_Users_Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mirrorly.Models.WorkingHour", b =>
                {
                    b.Property<long>("WorkingHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WorkingHourId"));

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("MuaId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("WorkingHourId");

                    b.HasIndex("MuaId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Mirrorly.Models.Booking", b =>
                {
                    b.HasOne("Mirrorly.Models.CustomerProfile", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Customer");

                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("Bookings")
                        .HasForeignKey("MuaId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_MUA");

                    b.Navigation("Customer");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.CustomerProfile", b =>
                {
                    b.HasOne("Mirrorly.Models.User", "Customer")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("Mirrorly.Models.CustomerProfile", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerProfiles_User");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Mirrorly.Models.IdentityVerification", b =>
                {
                    b.HasOne("Mirrorly.Models.User", "ProcessedByAdmin")
                        .WithMany()
                        .HasForeignKey("ProcessedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Mirrorly.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ProcessedByAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mirrorly.Models.Muaprofile", b =>
                {
                    b.HasOne("Mirrorly.Models.User", "Mua")
                        .WithOne("Muaprofile")
                        .HasForeignKey("Mirrorly.Models.Muaprofile", "Muaid")
                        .IsRequired()
                        .HasConstraintName("FK_MUAProfiles_User");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.PortfolioItem", b =>
                {
                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("PortfolioItems")
                        .HasForeignKey("Muaid")
                        .IsRequired()
                        .HasConstraintName("FK_PortfolioItems_MUA");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.Review", b =>
                {
                    b.HasOne("Mirrorly.Models.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Booking");

                    b.HasOne("Mirrorly.Models.CustomerProfile", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Customer");

                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("Reviews")
                        .HasForeignKey("MuaId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_MUA");

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.Service", b =>
                {
                    b.HasOne("Mirrorly.Models.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Services_Category");

                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("Services")
                        .HasForeignKey("MuaId")
                        .IsRequired()
                        .HasConstraintName("FK_Services_MUA");

                    b.Navigation("Category");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.TimeOff", b =>
                {
                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("TimeOffs")
                        .HasForeignKey("MuaId")
                        .IsRequired()
                        .HasConstraintName("FK_TimeOffs_MUA");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.TwoFactorAuth", b =>
                {
                    b.HasOne("Mirrorly.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Mirrorly.Models.TwoFactorAuth", "UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mirrorly.Models.User", b =>
                {
                    b.HasOne("Mirrorly.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mirrorly.Models.WorkingHour", b =>
                {
                    b.HasOne("Mirrorly.Models.Muaprofile", "Mua")
                        .WithMany("WorkingHours")
                        .HasForeignKey("MuaId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkingHours_MUA");

                    b.Navigation("Mua");
                });

            modelBuilder.Entity("Mirrorly.Models.Booking", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Mirrorly.Models.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Mirrorly.Models.CustomerProfile", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Mirrorly.Models.Muaprofile", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PortfolioItems");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("TimeOffs");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Mirrorly.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Mirrorly.Models.User", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("Muaprofile");
                });
#pragma warning restore 612, 618
        }
    }
}
